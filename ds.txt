FOR CREATING A VIRTUAL ENVIRONMENT BEFORE STARTING A PROJECT YOU NEED TO GIVE THIS CODES 
use the below code only when creating the virtual environmentt inside the local library 
1. conda create -p venv python=3.8 

create inside the local directory
ChatGPT
If you want to create a Conda environment inside a specific local directory, you can use the --prefix option to specify the path where the environment should be created. Here's how you can do it:
Open your terminal or command prompt.
Navigate to the directory where you want to create the Conda environment. You can use the cd command to change your current working directory to the desired location.
Use the conda create command with the --prefix option to specify the directory path for the environment. For example, to create an environment named "myenv" inside the current directory, you can run:

conda create --prefix ./myenv

This command will create a Conda environment named "myenv" in the current directory (./ refers to the current directory).
After the environment is created, you can activate it by specifying its full path:

conda activate /full/path/to/your/environment

Remember to replace /full/path/to/your/environment with the actual full path to your environment.
By following these steps, you can create a Conda environment inside a specific local directory.


************************************************************************************************************************************************************************************************************************************************


if you want to create inside a local (1 ) default(2) library you will use 
1. conda create -p venv
1. conda create -n xyz

To see the list of the environment
1. conda env list
2. conda info --envs

to activate the conda environment
1. conda avtivate pathname
2. conda activate "D:\jupyter\ineuron new\25th March Live Class Project pipeline explanation\demo-pipeline-main\venv"

Deletinga conda env
1. conda env remove --prefix "D:\jupyter\ineuron new\25th March Live Class Project pipeline explanation\demo-pipeline-main\venv"

whatever you dont want to add into github mention in gitignore

GIT Commands
1.git init
2. git add . 
3. git reset 
4. git status
5. git branch 
6. git commit -m "Your commit message here"
6. git remote add Origin https://github.com/Oyaabuun/random
7. git push -u Origin main
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
when you get fatal error
 git push -u origin main
To https://github.com/Oyaabuun/random.git
 ! [rejected]        main -> main (fetch first)
error: failed to push some refs to 'https://github.com/Oyaabuun/random.git'
hint: Updates were rejected because the remote contains work that you do
hint: not have locally. This is usually caused by another repository pushing
hint: to the same ref. You may want to first integrate the remote changes
hint: (e.g., 'git pull ...') before pushing again.
hint: See the 'Note about fast-forwards' in 'git push --help' for details.

ans

Fetch Changes from the Remote:

To update your local repository with the changes from the remote "main" branch, use the git fetch command:

bash
Copy code
git fetch origin main
Merge or Rebase Your Changes:

After fetching the changes, you have two options to integrate them into your local "main" branch:

a. Merge Changes: If you prefer merging, you can use the following command:

bash
Copy code
git merge origin/main
b. Rebase Changes: If you prefer rebasing to maintain a linear history, you can use the following command:

bash
Copy code
git rebase origin/main
Choose either "merge" or "rebase" based on your workflow preferences.

Resolve any Merge Conflicts:

If there are any merge conflicts, Git will notify you. You need to resolve these conflicts manually by editing the affected files and then continuing the merge or rebase process.

Commit the Merged or Rebased Changes:

After resolving any conflicts, commit the changes to your local "main" branch.

Push Your Changes to GitHub:

Once you have successfully merged or rebased the changes and resolved any conflicts, you can push your local "main" branch to GitHub:

bash
Copy code
git push -u origin main
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@

YOU NEED TO HAVE __init__.py file isnide every separate folder so it can be made a package , thats why check the census-income has that file

-e . this thing inside the requirements.txt says that whatever is ther intsll inside the current environment

the setup.py is necesarry for creating a package
